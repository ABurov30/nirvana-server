"use strict";var b=Object.defineProperty;var s=Object.getOwnPropertyDescriptor;var c=Object.getOwnPropertyNames;var g=Object.prototype.hasOwnProperty;var h=(i,e)=>{for(var n in e)b(i,n,{get:e[n],enumerable:!0})},x=(i,e,n,r)=>{if(e&&typeof e=="object"||typeof e=="function")for(let t of c(e))!g.call(i,t)&&t!==n&&b(i,t,{get:()=>e[t],enumerable:!(r=s(e,t))||r.enumerable});return i};var l=i=>x(b({},"__esModule",{value:!0}),i);var y={};h(y,{NumberModule:()=>o});module.exports=l(y);var u=require("../../errors/faker-error");class o{constructor(e){this.faker=e;for(const n of Object.getOwnPropertyNames(o.prototype))n==="constructor"||typeof this[n]!="function"||(this[n]=this[n].bind(this))}int(e={}){typeof e=="number"&&(e={max:e});const{min:n=0,max:r=Number.MAX_SAFE_INTEGER}=e,t=Math.ceil(n),a=Math.floor(r);if(t===a)return t;if(a<t)throw r>=n?new u.FakerError(`No integer value between ${n} and ${r} found.`):new u.FakerError(`Max ${r} should be greater than min ${n}.`);const m=this.faker._mersenne.next();return Math.floor(m*(a+1-t)+t)}float(e={}){typeof e=="number"&&(e={max:e});const{min:n=0,max:r=1,precision:t}=e;if(r===n)return n;if(r<n)throw new u.FakerError(`Max ${r} should be greater than min ${n}.`);if(t!==void 0){if(t<=0)throw new u.FakerError("Precision should be greater than 0.");const m=1/t;return this.int({min:n*m,max:r*m})/m}return this.faker._mersenne.next()*(r-n)+n}binary(e={}){typeof e=="number"&&(e={max:e});const{min:n=0,max:r=1}=e;return this.int({max:r,min:n}).toString(2)}octal(e={}){typeof e=="number"&&(e={max:e});const{min:n=0,max:r=7}=e;return this.int({max:r,min:n}).toString(8)}hex(e={}){typeof e=="number"&&(e={max:e});const{min:n=0,max:r=15}=e;return this.int({max:r,min:n}).toString(16)}bigInt(e={}){var f,m;(typeof e=="bigint"||typeof e=="number"||typeof e=="string"||typeof e=="boolean")&&(e={max:e});const n=BigInt((f=e.min)!=null?f:0),r=BigInt((m=e.max)!=null?m:n+BigInt(999999999999999));if(r===n)return n;if(r<n)throw new u.FakerError(`Max ${r} should be larger then min ${n}.`);const t=r-n,a=BigInt(this.faker.string.numeric({length:t.toString(10).length,allowLeadingZeros:!0}))%(t+BigInt(1));return n+a}}0&&(module.exports={NumberModule});
